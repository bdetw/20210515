{
  "swagger": "2.0",
  "info": {
    "description": "This is a api documentation for High5.ai internal nlp api. \nSemantic Search is an API for creating a cluster of sentences which will then be encoded for search and classification. \n Conversation is an API for generating next possible message base on previous messages. It can be use to generate reply for review or message for chatbot.",
    "version": "1.0.0",
    "title": "NLP Gateway"
  },
  "host": "nlp-gateway.dev.high5.ai",
  "basePath": "/",
  "tags": [
    {
      "name": "semantic-search",
      "description": "NLP Processing for semantic search",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://high5.ai"
      }
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/tasks/semanticsearch": {
      "post": {
        "tags": [
          "semantic-search"
        ],
        "summary": "Encode texts for a new cluster",
        "description": "",
        "operationId": "buildCluster",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Dataset of texts that needs to be encoded for the new cluster",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RequestSemanticSearchBuildCluster"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful encoded and cluster has been created",
            "schema": {
              "$ref": "#/definitions/ResponseSemanticSearchBuildCluster"
            }
          },
          "500": {
            "description": "server internal error"
          }
        },
        "security": []
      }
    },
    "/tasks/semanticsearch/{key}/texts": {
      "post": {
        "tags": [
          "semantic-search"
        ],
        "summary": "Encode Text and add to existing  cluster",
        "description": "",
        "operationId": "appendCluster",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Dataset of texts that needs to be encoded for the existing cluster",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RequestSemanticSearchAppendCluster"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful encoded and cluster has been updated",
            "schema": {
              "$ref": "#/definitions/ResponseSemanticSearchAppendCluster"
            }
          },
          "404": {
            "description": "cluster key not found"
          },
          "500": {
            "description": "server internal error"
          }
        },
        "security": []
      }
    },
    "/tasks/semanticsearch/{key}": {
      "get": {
        "tags": [
          "semantic-search"
        ],
        "summary": "Find matching texts by key and query",
        "description": "Returns a list of texts and matching score",
        "operationId": "getScores",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Key of Cluster",
            "required": true,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "input query to find matches",
            "required": true,
            "type": "string"
          },
          {
            "name": "classification",
            "in": "query",
            "description": "true | false to perform classicfication as well",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "return_type",
            "in": "query",
            "description": "api response by key or list",
            "required": false,
            "type": "string",
            "enum": [
              "key",
              "list"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseSemanticSearchGetScores"
            }
          },
          "404": {
            "description": "cluster key not found"
          },
          "500": {
            "description": "server internal error"
          }
        },
        "security": []
      }
    },
    "/tasks/conversation": {
      "post": {
        "tags": [
          "conversation"
        ],
        "summary": "Generate Next Conversation Message",
        "description": "",
        "operationId": "Generative",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Conversation of messages to predict the next message, minimum of 3 or more sample messages are required",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RequestConversationGenerative"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Generated Next Message from conversation",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "500": {
            "description": "server internal error"
          }
        },
        "security": []
      }
    }
  },
  "securityDefinitions": {},
  "definitions": {
    "RequestSemanticSearchBuildCluster": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "example": "cafe_taipei"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Item"
          }
        }
      }
    },
    "RequestSemanticSearchAppendCluster": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Item"
          }
        }
      }
    },
    "ResponseSemanticSearchBuildCluster": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "example": "cafe_taipei"
        }
      }
    },
    "RequestConversationGenerative": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "ResponseSemanticSearchAppendCluster": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "example": "cafe_taipei"
        }
      }
    },
    "ResponseSemanticSearchGetScores": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ItemScores"
          }
        }
      }
    },
    "Item": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "cafe_greeting_02"
        },
        "text": {
          "type": "string",
          "example": "Good Morning, do you sell pumpkin pie"
        },
        "metadata": {
          "type": "object",
          "example": {
            "reply": "yes we do"
          }
        }
      }
    },
    "ItemScores": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "cafe_greeting_02"
        },
        "text": {
          "type": "string",
          "example": "Good Morning, do you sell pumpkin pie"
        },
        "score": {
          "type": "number",
          "format": "float",
          "example": "0.8432"
        },
        "metadata": {
          "type": "object",
          "example": {
            "reply": "yes we do"
          }
        }
      }
    },
    "Message": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Sam"
        },
        "text": {
          "type": "string",
          "example": "Do you like pumpkin pie, I know I do"
        }
      }
    }
  }
}
